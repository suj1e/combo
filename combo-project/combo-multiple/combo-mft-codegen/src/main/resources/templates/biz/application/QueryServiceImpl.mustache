package {{pkg}};

import java.util.Optional;
import org.floocframework.boot.data.common.qry.DataPage;
import org.floocframework.boot.data.common.qry.DataPageable;
import org.floocframework.boot.data.common.qry.PageRequestWrapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import {{group}}.application.{{pkgPrefix}}.{{uPrefix}}QrySvc;
import {{group}}.application.{{pkgPrefix}}.mapper.{{uPrefix}}VOMapper;
import {{group}}.application.{{pkgPrefix}}.vo.{{uPrefix}}VO;
import {{group}}.domain.{{pkgPrefix}}.entity.{{uPrefix}}Entity;
import {{group}}.domain.{{pkgPrefix}}.qry.{{uPrefix}}Qry;
import {{group}}.domain.{{pkgPrefix}}.repo.{{uPrefix}}QryRepo;



/**
 * @author sujie
 * @since 1.0.0
 */
@Service
public class {{cls}} implements {{uPrefix}}QrySvc {

  @Autowired
  private {{uPrefix}}QryRepo {{prefix}}QryRepo;
  @Autowired
  private {{uPrefix}}VOMapper {{prefix}}VOMapper;

  @Override
  public DataPage<{{uPrefix}}VO> findByPage(PageRequestWrapper<{{uPrefix}}Qry> wrapper) {
    // 构建查询条件
    DataPage<{{uPrefix}}Entity> entityPage = {{prefix}}QryRepo.qryByPage(wrapper.getRequestData(),
        DataPageable.of(wrapper));
    return DataPage.of(entityPage, {{prefix}}VOMapper::entity2VO);
  }

  @Override
  public {{uPrefix}}VO findById(String id) {
    Optional<{{uPrefix}}Entity> entity = {{prefix}}QryRepo.qryById(id);
    return entity.map({{prefix}}VOMapper::entity2VO).orElse(null);
  }

}
