package {{pkg}};

import java.util.Optional;
import org.floocframework.boot.common.constant.CommonExceptionEnum;
import org.floocframework.boot.common.exception.BusinessException;
import org.floocframework.boot.common.validate.Validators;
import org.floocframework.boot.data.common.operation.entity.EOperations;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Assert;
import {{group}}.application.{{pkgPrefix}}.{{uPrefix}}CmdSvc;
import {{group}}.application.{{pkgPrefix}}.cmd.{{uPrefix}}CreateCmd;
import {{group}}.application.{{pkgPrefix}}.cmd.{{uPrefix}}UpdateCmd;
import {{group}}.application.{{pkgPrefix}}.mapper.{{uPrefix}}CmdMapper;
import {{group}}.domain.{{pkgPrefix}}.domainservice.{{uPrefix}}CmdDomainSvc;
import {{group}}.domain.{{pkgPrefix}}.entity.{{uPrefix}}Entity;
import {{group}}.domain.{{pkgPrefix}}.factory.{{uPrefix}}EntityFactory;
import {{group}}.domain.{{pkgPrefix}}.repo.{{uPrefix}}CmdRepo;
import {{group}}.domain.{{pkgPrefix}}.repo.{{uPrefix}}QryRepo;




/**
 * @author sujie
 * @since 1.0.0
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class {{cls}} implements {{uPrefix}}CmdSvc {

  @Autowired
	private {{uPrefix}}CmdDomainSvc {{prefix}}CmdDomainSvc;
  @Autowired
	private {{uPrefix}}CmdRepo {{prefix}}CmdRepo;
  @Autowired
	private {{uPrefix}}QryRepo {{prefix}}QryRepo;
  @Autowired
	private {{uPrefix}}CmdMapper {{prefix}}CmdMapper;

	@Override
	public String create({{uPrefix}}CreateCmd createCmd) {
		Optional<{{uPrefix}}Entity> entity = EOperations.doCreate({{prefix}}CmdRepo).create(() -> {
			Assert.state(createCmd != null, "{{uPrefix}}CreateCmd must not be null");
			Validators.validate(createCmd);
			return {{prefix}}CmdMapper.cmd2Entity(createCmd);
		}).handle({{uPrefix}}Entity::init).execute();
		return entity.map({{uPrefix}}Entity::getId).orElse(null);
	}

	@Override
	public void update({{uPrefix}}UpdateCmd updateCmd) {
		EOperations.doUpdate({{prefix}}CmdRepo).apply(() -> {
			Assert.state(updateCmd != null, "{{uPrefix}}UpdateCmd must not be null");
			Assert.state(updateCmd.getId() != null, "{{uPrefix}}UpdateCmd id must not be null");
			Validators.validate(updateCmd);
      {{uPrefix}}Entity entity = {{prefix}}QryRepo.qryById(updateCmd.getId())
				.orElseThrow(() -> new BusinessException(CommonExceptionEnum.NotFindError));
			return {{prefix}}CmdMapper.applyUpdate(updateCmd, entity);
		}).execute();
	}

	@Override
	public void delete(String id) {
		EOperations.doDelete({{prefix}}CmdRepo).apply(() -> {
			Assert.state(id != null, "Id must not be nul");
			Assert.state({{prefix}}QryRepo.exists(id), "It doesn't exist");
			return {{uPrefix}}EntityFactory.buildOfOnly(id);
		}).execute();
	}

	@Override
	public void valid(String id) {
		EOperations.doUpdate({{prefix}}CmdRepo).load(() -> {
			Assert.state(id != null, "Id must not be nul");
			return {{prefix}}QryRepo.qryById(id)
				.orElseThrow(() -> new BusinessException(CommonExceptionEnum.NotFindError));
		}).handle({{uPrefix}}Entity::valid).execute();
	}

	@Override
	public void invalid(String id) {
		EOperations.doUpdate({{prefix}}CmdRepo).load(() -> {
			Assert.state(id != null, "Id must not be nul");
			return {{prefix}}QryRepo.qryById(id)
				.orElseThrow(() -> new BusinessException(CommonExceptionEnum.NotFindError));
		}).handle({{uPrefix}}Entity::invalid).execute();
	}

}